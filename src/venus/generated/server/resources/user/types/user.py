# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions

from ...commons.types.user_id import UserId


class User(pydantic.BaseModel):
    user_id: UserId = pydantic.Field(alias="userId")
    username: str
    email: typing.Optional[str]
    created_at: typing.Optional[dt.datetime]

    class Partial(typing_extensions.TypedDict):
        user_id: typing_extensions.NotRequired[UserId]
        username: typing_extensions.NotRequired[str]
        email: typing_extensions.NotRequired[typing.Optional[str]]
        created_at: typing_extensions.NotRequired[typing.Optional[dt.datetime]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
        extra = pydantic.Extra.forbid
        json_encoders = {dt.datetime: lambda v: v.isoformat()}
