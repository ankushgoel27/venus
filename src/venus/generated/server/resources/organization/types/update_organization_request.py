# This file was auto-generated by Fern from our API Definition.

# flake8: noqa
# fmt: off
# isort: skip_file

from __future__ import annotations

import typing

import pydantic
import typing_extensions


class UpdateOrganizationRequest(pydantic.BaseModel):
    artifact_read_requires_token: bool = pydantic.Field(alias="artifactReadRequiresToken")

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @UpdateOrganizationRequest.Validators.field("artifact_read_requires_token")
            def validate_artifact_read_requires_token(v: bool, values: UpdateOrganizationRequest.Partial) -> bool:
                ...
        """

        _artifact_read_requires_token_validators: typing.ClassVar[
            typing.List[UpdateOrganizationRequest.Validators.ArtifactReadRequiresTokenValidator]
        ] = []

        @typing.overload  # type: ignore
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["artifact_read_requires_token"]
        ) -> typing.Callable[
            [UpdateOrganizationRequest.Validators.ArtifactReadRequiresTokenValidator],
            UpdateOrganizationRequest.Validators.ArtifactReadRequiresTokenValidator,
        ]:
            ...

        @classmethod
        def field(cls, field_name: str) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if field_name == "artifact_read_requires_token":
                    cls._artifact_read_requires_token_validators.append(validator)
                return validator

            return decorator

        class ArtifactReadRequiresTokenValidator(typing_extensions.Protocol):
            def __call__(self, v: bool, *, values: UpdateOrganizationRequest.Partial) -> bool:
                ...

    @pydantic.validator("artifact_read_requires_token")
    def _validate_artifact_read_requires_token(cls, v: bool, values: UpdateOrganizationRequest.Partial) -> bool:
        for validator in UpdateOrganizationRequest.Validators._artifact_read_requires_token_validators:
            v = validator(v, values=values)
        return v

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Partial(typing.TypedDict):
        artifact_read_requires_token: typing_extensions.NotRequired[bool]

    class Config:
        frozen = True
        allow_population_by_field_name = True
