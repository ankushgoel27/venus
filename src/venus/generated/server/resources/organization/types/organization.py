# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions

from ....core.datetime_utils import serialize_datetime
from ...commons.types.organization_id import OrganizationId
from .lightweight_user import LightweightUser


class Organization(pydantic.BaseModel):
    organization_id: OrganizationId = pydantic.Field(alias="organizationId")
    display_name: str = pydantic.Field(alias="displayName")
    artifact_read_requires_token: bool = pydantic.Field(alias="artifactReadRequiresToken")
    users: typing.List[LightweightUser]

    class Partial(typing_extensions.TypedDict):
        organization_id: typing_extensions.NotRequired[OrganizationId]
        display_name: typing_extensions.NotRequired[str]
        artifact_read_requires_token: typing_extensions.NotRequired[bool]
        users: typing_extensions.NotRequired[typing.List[LightweightUser]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
        extra = pydantic.Extra.forbid
        json_encoders = {dt.datetime: serialize_datetime}
