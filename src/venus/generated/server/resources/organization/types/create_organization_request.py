# This file was auto-generated by Fern from our API Definition.

# flake8: noqa
# fmt: off
# isort: skip_file

from __future__ import annotations

import typing

import pydantic
import typing_extensions

from ...commons.types.organization_id import OrganizationId


class CreateOrganizationRequest(pydantic.BaseModel):
    organization_id: OrganizationId = pydantic.Field(alias="organizationId")
    artifact_read_requires_token: typing.Optional[bool] = pydantic.Field(alias="artifactReadRequiresToken")

    class Partial(typing_extensions.TypedDict):
        organization_id: typing_extensions.NotRequired[OrganizationId]
        artifact_read_requires_token: typing_extensions.NotRequired[typing.Optional[bool]]

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @CreateOrganizationRequest.Validators.root
            def validate(values: CreateOrganizationRequest.Partial) -> CreateOrganizationRequest.Partial:
                ...

            @CreateOrganizationRequest.Validators.field("organization_id")
            def validate_organization_id(v: OrganizationId, values: CreateOrganizationRequest.Partial) -> OrganizationId:
                ...

            @CreateOrganizationRequest.Validators.field("artifact_read_requires_token")
            def validate_artifact_read_requires_token(v: typing.Optional[bool], values: CreateOrganizationRequest.Partial) -> typing.Optional[bool]:
                ...
        """

        _validators: typing.ClassVar[
            typing.List[typing.Callable[[CreateOrganizationRequest.Partial], CreateOrganizationRequest.Partial]]
        ] = []
        _organization_id_validators: typing.ClassVar[
            typing.List[CreateOrganizationRequest.Validators.OrganizationIdValidator]
        ] = []
        _artifact_read_requires_token_validators: typing.ClassVar[
            typing.List[CreateOrganizationRequest.Validators.ArtifactReadRequiresTokenValidator]
        ] = []

        @classmethod
        def root(
            cls, validator: typing.Callable[[CreateOrganizationRequest.Partial], CreateOrganizationRequest.Partial]
        ) -> typing.Callable[[CreateOrganizationRequest.Partial], CreateOrganizationRequest.Partial]:
            cls._validators.append(validator)
            return validator

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["organization_id"]
        ) -> typing.Callable[
            [CreateOrganizationRequest.Validators.OrganizationIdValidator],
            CreateOrganizationRequest.Validators.OrganizationIdValidator,
        ]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["artifact_read_requires_token"]
        ) -> typing.Callable[
            [CreateOrganizationRequest.Validators.ArtifactReadRequiresTokenValidator],
            CreateOrganizationRequest.Validators.ArtifactReadRequiresTokenValidator,
        ]:
            ...

        @classmethod
        def field(cls, field_name: str) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if field_name == "organization_id":
                    cls._organization_id_validators.append(validator)
                if field_name == "artifact_read_requires_token":
                    cls._artifact_read_requires_token_validators.append(validator)
                return validator

            return decorator

        class OrganizationIdValidator(typing_extensions.Protocol):
            def __call__(self, v: OrganizationId, *, values: CreateOrganizationRequest.Partial) -> OrganizationId:
                ...

        class ArtifactReadRequiresTokenValidator(typing_extensions.Protocol):
            def __call__(
                self, v: typing.Optional[bool], *, values: CreateOrganizationRequest.Partial
            ) -> typing.Optional[bool]:
                ...

    @pydantic.root_validator
    def _validate(cls, values: CreateOrganizationRequest.Partial) -> CreateOrganizationRequest.Partial:
        for validator in CreateOrganizationRequest.Validators._validators:
            values = validator(values)
        return values

    @pydantic.validator("organization_id")
    def _validate_organization_id(cls, v: OrganizationId, values: CreateOrganizationRequest.Partial) -> OrganizationId:
        for validator in CreateOrganizationRequest.Validators._organization_id_validators:
            v = validator(v, values=values)
        return v

    @pydantic.validator("artifact_read_requires_token")
    def _validate_artifact_read_requires_token(
        cls, v: typing.Optional[bool], values: CreateOrganizationRequest.Partial
    ) -> typing.Optional[bool]:
        for validator in CreateOrganizationRequest.Validators._artifact_read_requires_token_validators:
            v = validator(v, values=values)
        return v

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
