# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions


class MavenRegistryToken(pydantic.BaseModel):
    username: str
    password: str

    class Partial(typing_extensions.TypedDict):
        username: typing_extensions.NotRequired[str]
        password: typing_extensions.NotRequired[str]

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @MavenRegistryToken.Validators.root
            def validate(values: MavenRegistryToken.Partial) -> MavenRegistryToken.Partial:
                ...

            @MavenRegistryToken.Validators.field("username")
            def validate_username(username: str, values: MavenRegistryToken.Partial) -> str:
                ...

            @MavenRegistryToken.Validators.field("password")
            def validate_password(password: str, values: MavenRegistryToken.Partial) -> str:
                ...
        """

        _validators: typing.ClassVar[
            typing.List[typing.Callable[[MavenRegistryToken.Partial], MavenRegistryToken.Partial]]
        ] = []
        _username_validators: typing.ClassVar[typing.List[MavenRegistryToken.Validators.UsernameValidator]] = []
        _password_validators: typing.ClassVar[typing.List[MavenRegistryToken.Validators.PasswordValidator]] = []

        @classmethod
        def root(
            cls, validator: typing.Callable[[MavenRegistryToken.Partial], MavenRegistryToken.Partial]
        ) -> typing.Callable[[MavenRegistryToken.Partial], MavenRegistryToken.Partial]:
            cls._validators.append(validator)
            return validator

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["username"]
        ) -> typing.Callable[
            [MavenRegistryToken.Validators.UsernameValidator], MavenRegistryToken.Validators.UsernameValidator
        ]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["password"]
        ) -> typing.Callable[
            [MavenRegistryToken.Validators.PasswordValidator], MavenRegistryToken.Validators.PasswordValidator
        ]:
            ...

        @classmethod
        def field(cls, field_name: str) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if field_name == "username":
                    cls._username_validators.append(validator)
                if field_name == "password":
                    cls._password_validators.append(validator)
                return validator

            return decorator

        class UsernameValidator(typing_extensions.Protocol):
            def __call__(self, __v: str, __values: MavenRegistryToken.Partial) -> str:
                ...

        class PasswordValidator(typing_extensions.Protocol):
            def __call__(self, __v: str, __values: MavenRegistryToken.Partial) -> str:
                ...

    @pydantic.root_validator
    def _validate(cls, values: MavenRegistryToken.Partial) -> MavenRegistryToken.Partial:
        for validator in MavenRegistryToken.Validators._validators:
            values = validator(values)
        return values

    @pydantic.validator("username")
    def _validate_username(cls, v: str, values: MavenRegistryToken.Partial) -> str:
        for validator in MavenRegistryToken.Validators._username_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("password")
    def _validate_password(cls, v: str, values: MavenRegistryToken.Partial) -> str:
        for validator in MavenRegistryToken.Validators._password_validators:
            v = validator(v, values)
        return v

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
