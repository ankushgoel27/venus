# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions

from ...commons.types.organization_id import OrganizationId


class RevokeTokenRequest(pydantic.BaseModel):
    organization_id: OrganizationId = pydantic.Field(alias="organizationId")
    token: str

    class Partial(typing_extensions.TypedDict):
        organization_id: typing_extensions.NotRequired[OrganizationId]
        token: typing_extensions.NotRequired[str]

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @RevokeTokenRequest.Validators.root
            def validate(values: RevokeTokenRequest.Partial) -> RevokeTokenRequest.Partial:
                ...

            @RevokeTokenRequest.Validators.field("organization_id")
            def validate_organization_id(organization_id: OrganizationId, values: RevokeTokenRequest.Partial) -> OrganizationId:
                ...

            @RevokeTokenRequest.Validators.field("token")
            def validate_token(token: str, values: RevokeTokenRequest.Partial) -> str:
                ...
        """

        _validators: typing.ClassVar[
            typing.List[typing.Callable[[RevokeTokenRequest.Partial], RevokeTokenRequest.Partial]]
        ] = []
        _organization_id_validators: typing.ClassVar[
            typing.List[RevokeTokenRequest.Validators.OrganizationIdValidator]
        ] = []
        _token_validators: typing.ClassVar[typing.List[RevokeTokenRequest.Validators.TokenValidator]] = []

        @classmethod
        def root(
            cls, validator: typing.Callable[[RevokeTokenRequest.Partial], RevokeTokenRequest.Partial]
        ) -> typing.Callable[[RevokeTokenRequest.Partial], RevokeTokenRequest.Partial]:
            cls._validators.append(validator)
            return validator

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["organization_id"]
        ) -> typing.Callable[
            [RevokeTokenRequest.Validators.OrganizationIdValidator],
            RevokeTokenRequest.Validators.OrganizationIdValidator,
        ]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["token"]
        ) -> typing.Callable[
            [RevokeTokenRequest.Validators.TokenValidator], RevokeTokenRequest.Validators.TokenValidator
        ]:
            ...

        @classmethod
        def field(cls, field_name: str) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if field_name == "organization_id":
                    cls._organization_id_validators.append(validator)
                if field_name == "token":
                    cls._token_validators.append(validator)
                return validator

            return decorator

        class OrganizationIdValidator(typing_extensions.Protocol):
            def __call__(self, __v: OrganizationId, __values: RevokeTokenRequest.Partial) -> OrganizationId:
                ...

        class TokenValidator(typing_extensions.Protocol):
            def __call__(self, __v: str, __values: RevokeTokenRequest.Partial) -> str:
                ...

    @pydantic.root_validator
    def _validate(cls, values: RevokeTokenRequest.Partial) -> RevokeTokenRequest.Partial:
        for validator in RevokeTokenRequest.Validators._validators:
            values = validator(values)
        return values

    @pydantic.validator("organization_id")
    def _validate_organization_id(cls, v: OrganizationId, values: RevokeTokenRequest.Partial) -> OrganizationId:
        for validator in RevokeTokenRequest.Validators._organization_id_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("token")
    def _validate_token(cls, v: str, values: RevokeTokenRequest.Partial) -> str:
        for validator in RevokeTokenRequest.Validators._token_validators:
            v = validator(v, values)
        return v

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
