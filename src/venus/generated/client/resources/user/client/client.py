# This file was auto-generated by Fern from our API Definition.

import typing
import urllib

import httpx
import pydantic

from ....core.api_error import ApiError
from ....core.remove_none_from_headers import remove_none_from_headers
from ..types.organizations_page import OrganizationsPage
from ..types.user import User


class UserClient:
    def __init__(self, *, environment: str, token: typing.Optional[str] = None):
        self._environment = environment
        self._token = token

    def get_myself(self) -> User:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", "users"),
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
        )
        _response_json = _response.json()
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(User, _response)  # type: ignore
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_my_organizations(self, *, page_id: int) -> OrganizationsPage:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", "users/organizations"),
            params={"pageId": page_id},
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
        )
        _response_json = _response.json()
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(OrganizationsPage, _response)  # type: ignore
        raise ApiError(status_code=_response.status_code, body=_response_json)
