# This file was auto-generated by Fern from our API Definition.

import typing
import urllib

import httpx
import pydantic

from ....core.api_error import ApiError
from ....core.remove_none_from_headers import remove_none_from_headers
from ...commons.errors.unauthorized_error import UnauthorizedError
from ...commons.types.organization_id import OrganizationId
from ..errors.organization_not_found_error import OrganizationNotFoundError
from ..types.registry_token import RegistryToken
from ..types.registry_tokens import RegistryTokens


class RegistryClient:
    def __init__(self, *, environment: str, token: typing.Optional[str] = None):
        self._environment = environment
        self._token = token

    def generate_registry_tokens(self, *, organization_id: OrganizationId) -> RegistryTokens:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", "registry/generate-tokens"),
            json={"organizationId": organization_id},
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
        )
        _response_json = _response.json()
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(RegistryTokens, _response)  # type: ignore
        if _response_json["error"] == "UnauthorizedError":
            raise UnauthorizedError()
        if _response_json["error"] == "OrganizationNotFoundError":
            raise OrganizationNotFoundError()
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def has_registry_permission(
        self, *, organization_id: OrganizationId, token: typing.Optional[RegistryToken] = None
    ) -> bool:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", "registry/check-permissions"),
            json={"organizationId": organization_id, "token": token},
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
        )
        _response_json = _response.json()
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(bool, _response)  # type: ignore
        if _response_json["error"] == "UnauthorizedError":
            raise UnauthorizedError()
        if _response_json["error"] == "OrganizationNotFoundError":
            raise OrganizationNotFoundError()
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def revoke_token(self, *, organization_id: OrganizationId, token: str) -> None:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", "registry/revoke-token"),
            json={"organizationId": organization_id, "token": token},
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
        )
        _response_json = _response.json()
        if _response_json["error"] == "UnauthorizedError":
            raise UnauthorizedError()
        if _response_json["error"] == "OrganizationNotFoundError":
            raise OrganizationNotFoundError()
        raise ApiError(status_code=_response.status_code, body=_response_json)
