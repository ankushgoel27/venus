# This file was auto-generated by Fern from our API Definition.

import typing
import urllib

import httpx
import pydantic

from ....core.api_error import ApiError
from ....core.remove_none_from_headers import remove_none_from_headers
from ...commons.errors.unauthorized_error import UnauthorizedError
from ...commons.errors.user_id_does_not_exist_error import UserIdDoesNotExistError
from ...commons.types.organization_id import OrganizationId
from ...commons.types.user_id import UserId
from ..errors.organization_already_exists_error import OrganizationAlreadyExistsError
from ..types.organization import Organization


class OrganizationClient:
    def __init__(self, *, environment: str, token: typing.Optional[str] = None):
        self._environment = environment
        self._token = token

    def create(
        self, *, organization_id: OrganizationId, artifact_read_requires_token: typing.Optional[bool] = None
    ) -> None:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", "organizations/create"),
            json={"organizationId": organization_id, "artifactReadRequiresToken": artifact_read_requires_token},
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
        )
        _response_json = _response.json()
        if "error" in _response_json:
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError()
            if _response_json["error"] == "OrganizationAlreadyExistsError":
                raise OrganizationAlreadyExistsError()
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(self, org_id: OrganizationId, *, artifact_read_requires_token: bool) -> None:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", f"organizations/{org_id}/update"),
            json={"artifactReadRequiresToken": artifact_read_requires_token},
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
        )
        _response_json = _response.json()
        if _response_json["error"] == "UnauthorizedError":
            raise UnauthorizedError()
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(self, org_id: OrganizationId) -> Organization:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"organizations/{org_id}"),
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
        )
        _response_json = _response.json()
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Organization, _response)  # type: ignore
        if _response_json["error"] == "UnauthorizedError":
            raise UnauthorizedError()
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def is_member(self, organization_id: OrganizationId) -> bool:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", f"organizations/belongs-to-organization/{organization_id}"),
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
        )
        _response_json = _response.json()
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(bool, _response)  # type: ignore
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_my_organization_from_scoped_token(self) -> Organization:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", "organizations/myself"),
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
        )
        _response_json = _response.json()
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Organization, _response)  # type: ignore
        if _response_json["error"] == "UnauthorizedError":
            raise UnauthorizedError()
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def add_user(self, *, user_id: UserId, org_id: OrganizationId) -> None:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", "organizations/add-user"),
            json={"userId": user_id, "orgId": org_id},
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
        )
        _response_json = _response.json()
        if _response_json["error"] == "UnauthorizedError":
            raise UnauthorizedError()
        if _response_json["error"] == "UserIdDoesNotExistError":
            raise UserIdDoesNotExistError()
        raise ApiError(status_code=_response.status_code, body=_response_json)
